#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
	
	
    server {
        #listen       80;
        #server_name  localhost;
        #
        #charset koi8-r;
        #
        #access_log  logs/host.access.log  main;
        #
        #location / {
        #    root   html;
        #    index  index.html index.htm;
		#	proxy_pass http://localhost:8388;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
	
	#定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，
    #以$binary_remote_addr 为key,限制平均每秒的请求为20个，
    #1M能存储16000个状态，rete的值必须为整数，
    #如果限制两秒钟一个请求，可以设置成30r/m

    limit_req_zone $binary_remote_addr zone=allips:50m rate=20r/s;

    # HTTPS server
    
	
	
	geo $whiteiplist  {
		default 1;
		127.0.0.1 0;
		192.168.1.99 0;
		47.91.235.103 0;
		10.0.0.0/8 0;
		121.207.242.0/24 0;
	}
    
	map $whiteiplist  $limit {
		1 $binary_remote_addr;
		0 "";
	}
	
	#gzip用于压缩网络中的image/js/css等静态资源
	gzip  on;
    gzip_min_length 1k;
    gzip_buffers 16 64k;
    gzip_http_version 1.1;
    gzip_comp_level 6;
    gzip_types text/plain application/javascript text/css application/xml;
    gzip_vary on;
	
	
    server {
		listen 		 80 default backlog=2048;
        listen       443 ssl;
        server_name  front;
    
        ssl_certificate      ./ssl/www/214235821190863.pem;
        ssl_certificate_key  ./ssl/www/214235821190863.key;
    
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
    
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;
		
        location / {
            root   html;
            index  index.html index.htm;
			proxy_pass http://localhost:8388;
			
			#限制每ip每秒不超过20个请求，漏桶数burst为5
            #brust的意思就是，如果第1秒、2,3,4秒请求为19个，
            #第5秒的请求为25个是被允许的。
            #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。
            #nodelay，如果不设置该选项，严格使用平均速率限制请求数，
            #第1秒25个请求时，5个请求放到第2秒执行，
            #设置nodelay，25个请求将在第1秒执行。

            limit_req zone=allips burst=5 nodelay;
			
        }
    }
	
	# chat application
	server {
		listen 		 80;
        server_name  chat.emlice.top;
    
        location / {
            root   html;
            index  index.html index.htm;
			
			#解决转发后websocket映射问题
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
			
			proxy_pass http://localhost:3000;
        }
    }
	
	# static
	server {
		listen 		 80;
        server_name  static.emlice.top;
    
        location / {
            root   html;
            index  index.html index.htm;
			proxy_pass http://localhost:8989;
        }
    }
	
	# readhub
	server {
		listen 		 80;
        server_name  readhub.emlice.top;
    
        location / {
            root   html;
            index  index.html index.htm;
			proxy_pass http://localhost:8888;
        }
    }
	
	# Emlice's Blog
	server {
		listen 		 80;
        server_name  blogAdmin.emlice.top;
    
        location / {
            root   html;
            index  index.html index.htm;
			proxy_pass http://localhost:4000;
        }
    }
	
	
	# 静态部署 hexo blog
	server {
		listen 		 80;
        server_name  blog.emlice.top;
    
        location / {
            root   /root/items/blog.emlice.top/public;
            index  index.html index.htm;
			proxy_pass http://localhost:4001;
        }
    }
	
	
	# Request-process
	server {
		listen 		 80;
        server_name  request.emlice.top;
    
        location / {
            root   /root/items/Request-process;
            index  index.html index.htm;
			proxy_pass http://localhost:2000;
        }
    }
	
	# Vue-Music-Generator
	server {
		listen 		 80;
        server_name  music.emlice.top;
    
        location / {
            root   /root/items/Vue-Music-Generator;
            index  index.html index.htm;
			proxy_pass http://localhost:6868;
        }
    }
	
	
	server {
		listen 80;
		server_name emlice.top www.emlice.top;
		return 301 https://www.emlice.top$request_uri;
	}

}